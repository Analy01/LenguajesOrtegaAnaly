1.SI UNA CLASE NO TIENE CONSTRUCTOR DECLARADO(ESCRITO) AL CREAR UN OBJETO SE USARA EL CONSTRUCTOR POR DEFECTO, EL CUAL 
NO TIENE ARGUMENTOS, SU FUNCION DE ESTE CONSTRUCTOR ES INICIALIZZAR ATRIBUTOS A SU VALOR POR DEFECTO

1.
public class test{ int x;}

public class main{
    public static void main(string org[]){
             test algo=new test();
             System.out.println(algo.x);}}
//como podemos ver el uso de un constructor, al no ser declarado en la clase se usara el constructor por defecto y NO TIENE ARGUMENTOS asi que es un numerico 

(primitivo) lo inicializa en cero por defecto
---------------
1.1.
public class test{ String x;}

public class main{
    public static void main(string org[]){
             test algo=new test();
             System.out.println(algo.x);}}
//como podemos ver el uso de un constructor, al no ser declarado en la clase se usara el constructor por defecto y NO TIENE ARGUMENTOS asi que es un atributo 

referenciado lo que inicializa en null por defecto.
---------------------
2.
public class test{ public test(){} }
//aqui el programa compila y se ejecuta ya que lo unico que hicimos fue poner el constructor por defecto que no es necesario ponerlo cuando no inicializamos un 

atributo
--------------------
3.
public class test{ test(); }
//marcara error ya que este constructor solo se usa cuando mandamos a llamar al constructor y le asignamos un nuevo objeto
-------------------
4.
public class test{ public void test(){} }
//aqui compilara y se ejecutara muy bien ya que cuando utilizemos un constructor no lleva tipo de retorno ya que dicho constructor se convertira en un metodo
----------------------
5.
public class test{ 
                public test(){
                int y=5;
                System.out.println(y); }}
//al codificar esto no marcara error ya que el constructor permite inicializar los atributos aunque en este caso declaramos una variable local, el problema seria al 

usarlo en un main ya que es una variable local.
--------------------
6.
public class test{
                 public test(){
                 int y;
                 System.out.println(y);}}
//marcara error ya que esta variable local hecha dentro del constructor no la inicializamos y no identifica su valor y el constructor no lo hace por defecto ya que es 

una variable local asi que marcara error en la linea del System.
-------------------
7.
public class test{
                 int y;
                  public test(){
                  System.out.println(y);}}
//ente codigo no marcara error ya que estamos declarando la variable afuera del constructor, asi que no es una variable local y dentro del constructor lo inicializa 

por defecto en 0
--------------------
8.
public class test{ int x; }
public class main{
  int x;
public static void main(string w[]){
   test s=new test();
   System.out.printl(x);
}}
//marca erro ya que en primera no utilizamos la variable de a clase y despues utilizamos una variable local que no tiene valor y no se inicializa por defecto
----------------------
9.
public class test{ int x; }
public class main{
public static void main(string w[]){
    int x;
   test s=new test();
   System.out.printl(x);
}}
//error por el static ya que si compila pero no se ejecuta(tema que se vera mas adelante)



////////////////////////////////////////////////////////////////////////////////////////////

/* Ejercicio 1. Tenemos la clase */

public class Hola{
	public Hola(){ }
	public Hola(int x){}
	public Hola(float y){}

}


/* Se tiene la siguiente clase */
public class Prueba{
     public static void min(String args[]){
	/* correcta */
	Hola x=new Hola();
	}
}

----------------------------------------
/* Ejercicio 2. Tenemos las clase siguientes Existe algun error?  */

public class Hola{
	public Hola(int x){ }//NOTA: Solo combinaciones distintas
	public Hola(float y){}
	public Hola(int x, float y){}
	public Hola(int y, float x){}-----/*Este esta mal, por que se sta repitiendo la misma estructura de dato aunque con diferente nombre*/
	public Hola(float x,int y){}
	public Hola(int x, float y float z){}
}

/* Respuesta del por qué 

public class Prueba 
     public static void main(String rgs[]){
	
	Hola ob1=new Hola();//incorrecto por que no hay constructor por default
	Hola ob2=new Hola(-7);//correcto por que tiene contructor entero
	Hola ob3=new Hola(5,4f);//correcto
	Hola ob4=new Hola(4,5f,5);//correcto
	Hola ob5=new Hola(5,4,6f);//incorrecto por duplicidad de constructores
}

----------------------------------------------
/* Ejercicio 3. Tenemos la clase Cuales rnglones marcan error?  */

public class Prueba{
      public static void main(String args[]){
	byte x=2;
	short y=2;
	int z=2,
	long w=2,
	
z=x;  //z mayor a x; Correcto                       //A los que tienen la palabra correcto les estan quitando el tipo de dato original y los estan 
w=x; //w mayor a x; Correcto                         pasando a uno mas grande. A esto en lenguaje tecnico se llama CASTING EXPLÍCITO(promoción)
	y=z;//y menor a z
	z=w;//z menor a w                                  //Los que estan incorrectos se pueden corregir
	x=w;//x menor a w
y=x; //y mayor a x; Correcto
w=y; //w mayor a y; Correcto
	x=z;//x menor a z

}
---------------------------------------------
/* Ejercicio 4. Corregir con CASTING FORZADO los que estuvieron mal del jercicio anterior */

public class Prueba{
      public static void main(String args[]){

	byte x=2;
	short y=2;
	int z=2,
	long w=2,
	
	z=x;                               //Para que esten correctos siempre hay que ponerle la integral a la que pertenece                     
	w=x;                                 por ejemplo: y=(short)z --short pertenece a la variable y                  
	y=(short)z;
	z=(int)w;                              
	x=(byte)w;
	y=x;                                
	w=y;                              
	x=(byte)z;
